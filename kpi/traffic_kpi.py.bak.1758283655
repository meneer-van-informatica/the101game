from flask import Flask, request, jsonify, make_response, Response
import time, threading, uuid, re, os
from datetime import datetime, timezone

app = Flask(__name__)

# ====== CONFIG / STATE =================================================================
TTL_SECONDS = 35
_sessions = {}   # sid -> {"last_seen": float, "joined_at": float, "code": str|None}
_lock = threading.Lock()
CODE_RE = re.compile(r"^[A-Z]{4}$")

# "Refresh iedereen" versie-nummer; clients herladen zodra dit wijzigt
_rev = 1
_admin_token = None

def _load_admin_token():
    path = "/home/lucas/the101game/kpi/admin.secret"
    if os.path.exists(path):
        with open(path, "r") as f:
            return f.read().strip()
    return os.environ.get("KPI_ADMIN_TOKEN", "dev")

_admin_token = _load_admin_token()

# ====== HELPERS =========================================================================
def _now(): return time.time()
def _iso(ts): return datetime.fromtimestamp(ts, tz=timezone.utc).isoformat(timespec="seconds")
def _pad5(n): return str(int(n)).zfill(5)

def _sweep(now=None):
    if now is None: now = _now()
    dead = [sid for sid, d in list(_sessions.items()) if now - d.get("last_seen", 0) > TTL_SECONDS]
    for sid in dead: _sessions.pop(sid, None)

def _active_count(now=None):
    if now is None: now = _now()
    return sum(1 for d in _sessions.values() if now - d.get("last_seen", 0) <= TTL_SECONDS)

def _get_or_create_session(sid, now=None):
    if now is None: now = _now()
    s = _sessions.get(sid)
    if not s:
        s = {"last_seen": now, "joined_at": now, "code": None}
        _sessions[sid] = s
    return s

# ====== KPI #1: heartbeat / concurrent count ============================================
@app.route("/kpi/pulse", methods=["POST","GET"])
def pulse():
    sid = request.cookies.get("sid") or uuid.uuid4().hex
    now = _now()
    with _lock:
        s = _get_or_create_session(sid, now)
        s["last_seen"] = now
        _sweep(now)
        cnt = _active_count(now)
        rev = _rev
    res = make_response(jsonify({"count": cnt, "sid": sid, "ttl": TTL_SECONDS, "rev": rev}))
    res.set_cookie("sid", sid, max_age=86400, secure=True, httponly=False, samesite="Lax")
    res.headers["Cache-Control"] = "no-store"
    return res

@app.get("/kpi/traffic/read")
def traffic_read():
    with _lock:
        _sweep()
        cnt = _active_count()
    if request.args.get("json"):
        return jsonify({"count": cnt, "ttl": TTL_SECONDS})
    body = f"the101game â€” Traffic KPI\nDit is tijdelijk de enige live feature.\nTraffic: {_pad5(cnt)} live\n"
    return Response(body, mimetype="text/plain")

@app.get("/kpi/traffic")
def traffic_compat():
    with _lock:
        _sweep()
        cnt = _active_count()
    return jsonify({"count": cnt})

# ====== KPI #2: alias + join/leave + scorebord ==========================================
@app.post("/kpi/join")
def join():
    # body: form (code=ABCD) of json {"code":"ABCD"}
    code = (request.form.get("code") if request.form else None) or (request.json or {}).get("code", None)
    if not code or not CODE_RE.match(code):
        return jsonify({"ok": False, "error": "CODE_INVALID", "hint": "Gebruik precies 4 hoofdletters [A-Z]."}), 400
    sid = request.cookies.get("sid") or uuid.uuid4().hex
    now = _now()
    with _lock:
        s = _get_or_create_session(sid, now)
        s["code"] = code
        s["joined_at"] = now          # (re)join = nieuwe streak
        s["last_seen"] = now
        _sweep(now)
        cnt = _active_count(now)
        rev = _rev
    res = make_response(jsonify({"ok": True, "sid": sid, "code": code, "count": cnt, "since": _iso(now), "rev": rev}))
    res.set_cookie("sid", sid, max_age=86400, secure=True, httponly=False, samesite="Lax")
    res.headers["Cache-Control"] = "no-store"
    return res

@app.post("/kpi/leave")
def leave():
    sid = request.cookies.get("sid")
    with _lock:
        if sid: _sessions.pop(sid, None)
        _sweep()
    return jsonify({"ok": True})

@app.get("/kpi/board")
def board():
    now = _now()
    with _lock:
        _sweep(now)
        items = []
        for sid, d in _sessions.items():
            if now - d.get("last_seen", 0) > TTL_SECONDS: continue
            code = d.get("code")
            if not code: continue
            joined = d.get("joined_at", now)
            age = max(0, now - joined)
            items.append({"code": code, "age_s": int(age), "since": _iso(joined)})
        items.sort(key=lambda x: (-x["age_s"], x["code"]))
        rev = _rev
    return jsonify({"ttl": TTL_SECONDS, "updated": _iso(now), "count": len(items), "board": items, "rev": rev})

# ====== KPI #3: ADMIN refresh iedereen (bump rev) =======================================
@app.get("/kpi/version")
def version():
    return jsonify({"rev": _rev})

@app.post("/kpi/admin/refresh")
def admin_refresh():
    token = request.args.get("token") or (request.json or {}).get("token")
    if token != _admin_token:
        return jsonify({"ok": False, "error": "UNAUTHORIZED"}), 401
    with _lock:
        global _rev
        _rev += 1
        rev = _rev
    return jsonify({"ok": True, "rev": rev})

# (debug) huidige sessies (incl. code)
@app.get("/kpi/sessions")
def sessions():
    now = _now()
    with _lock:
        _sweep(now)
        out = []
        for sid, d in _sessions.items():
            if now - d.get("last_seen", 0) <= TTL_SECONDS:
                out.append({
                    "sid": sid, "code": d.get("code"),
                    "seen_s": round(now - d.get("last_seen", 0), 1),
                    "age_s": round(now - d.get("joined_at", now), 1),
                })
        out.sort(key=lambda x: -x["age_s"])
    return jsonify({"ttl": TTL_SECONDS, "active": len(out), "sessions": out})
